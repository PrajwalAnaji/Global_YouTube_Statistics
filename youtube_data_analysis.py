# -*- coding: utf-8 -*-
"""youtube_data_analysis.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/18HAFUgGFrx9oQAjwMWv1tN6UyHVTIrrD
"""

# Commented out IPython magic to ensure Python compatibility.
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
# %matplotlib inline
import seaborn as sns

df = pd.read_csv("Global_YouTube_Statistics.csv", encoding="ISO-8859-1")

display(df.head())

display(df.info())

display(df.columns)

display(df.describe(include='all').T)
display(df.isnull().sum())
display(df.duplicated().sum())

df = df.dropna()

dropped_features = [
    'Abbreviation', 'created_month', 'created_date', 'Latitude', 'Longitude'
]
df = df.drop(df[dropped_features], axis=1)
df.info()

num_cols =  [
    'subscribers',
    'video views',
    'uploads',
    'video_views_for_the_last_30_days',
    'lowest_yearly_earnings',
    'highest_yearly_earnings',
    'subscribers_for_last_30_days',
    'Population',
    'Urban_population'
]
plt.figure(figsize=(10, 6))
sns.heatmap(df[num_cols].corr(), annot=True, fmt=".2f", cmap="coolwarm", linewidths=0.5)
plt.title("Correlation Between Numerical Features")
plt.tight_layout()
plt.show()

df['avg_yearly_earning'] = (df['lowest_yearly_earnings'] + df['highest_yearly_earnings']) / 2

plt.figure(figsize=(10, 6))  # width=12 inches, height=8 inches
sns.scatterplot(data=df, x='subscribers', y='avg_yearly_earning', hue='channel_type')
plt.title("Avg Yearly Earning vs Subscribers by Channel Type", fontsize=16)
plt.xlabel("Subscribers", fontsize=12)
plt.ylabel("Average Yearly Earnings", fontsize=12)
plt.xscale('log')  # for better visibility if data varies widely
plt.yscale('log')
plt.legend(bbox_to_anchor=(1.05, 1), loc='upper left')  # move legend outside plot
plt.tight_layout()
plt.show()

top_growth = df[['Youtuber', 'subscribers_for_last_30_days']].dropna().sort_values(by='subscribers_for_last_30_days', ascending=False).head(10)
top_growth

top_countries = df['Country'].value_counts().head(10).sort_values(ascending=True)
top_countries.plot(kind='barh', title='Top 10 Countries by YouTuber Count')
plt.xlabel("Number of YouTubers")
plt.show()

df['revenue_per_sub'] = df['avg_yearly_earning'] / df['subscribers']
top_rev_eff = df[['Youtuber', 'revenue_per_sub']].dropna().sort_values(by='revenue_per_sub', ascending=False).head(10)
top_rev_eff

cat_rev = df.groupby('category')['avg_yearly_earning'].mean().sort_values(ascending=False)
cat_rev.plot(kind='bar', title='Average Yearly Earnings by Category')
plt.ylabel("Average Earning")
plt.show()

df['revenue_per_subscriber'] = df['avg_yearly_earning'] / df['subscribers']
country_avg = df.groupby('Country')['revenue_per_subscriber'].mean().sort_values(ascending=False).head(10)

plt.figure(figsize=(12, 6))
sns.barplot(x=country_avg.values, y=country_avg.index)
plt.title("Top 10 Countries by Revenue Per Subscriber")
plt.xlabel("Revenue Per Subscriber")
plt.ylabel("Country")
plt.tight_layout()
plt.show()

plt.figure(figsize=(10, 6))
sns.regplot(data=df, x='Urban_population', y='uploads', scatter_kws={'alpha':0.6})
plt.title("Urban Population vs Uploads (with Regression Line)")
plt.xlabel("Urban Population (%)")
plt.ylabel("Number of Uploads")
plt.grid(True)
plt.tight_layout()
plt.show()

plt.figure(figsize=(10, 6))
sns.scatterplot(data=df, x='Unemployment rate', y='subscribers_for_last_30_days')
plt.title("Unemployment Rate vs Recent Subscriber Growth")
plt.xlabel("Unemployment Rate (%)")
plt.ylabel("Subscribers Gained in Last 30 Days")
plt.grid(True)
plt.tight_layout()
plt.show()

plt.figure(figsize=(10, 6))
sns.scatterplot(data=df, x='Population', y='subscribers')
plt.title("Country Population vs YouTube Channel Subscribers")
plt.xlabel("Population")
plt.ylabel("Subscribers")
plt.xscale("log")
plt.yscale("log")
plt.grid(True)
plt.tight_layout()
plt.show()

df['avg_yearly_earning'] = (df['lowest_yearly_earnings'] + df['highest_yearly_earnings']) / 2

plt.figure(figsize=(10, 6))
sns.scatterplot(data=df, x='Gross tertiary education enrollment (%)', y='avg_yearly_earning')
plt.title("Education Enrollment vs Average Yearly Earnings")
plt.xlabel("Gross Tertiary Education Enrollment (%)")
plt.ylabel("Average Yearly Earnings")
plt.yscale("log")
plt.grid(True)
plt.tight_layout()
plt.show()